/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 at Tue Nov 21 00:30:48 2017. */

#ifndef PB_SENSORBUG_PB_H_INCLUDED
#define PB_SENSORBUG_PB_H_INCLUDED
#include "pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _SensorMessage {
    bool has_pir_status;
    uint32_t pir_status;
    bool has_mic;
    uint32_t mic;
    bool has_light;
    uint32_t light;
    bool has_accelx;
    float accelx;
    bool has_accely;
    float accely;
    bool has_accelz;
    float accelz;
    bool has_gyrx;
    float gyrx;
    bool has_gyry;
    float gyry;
    bool has_gyrz;
    float gyrz;
    bool has_magx;
    float magx;
    bool has_magy;
    float magy;
    bool has_magz;
    float magz;
    bool has_temperature;
    float temperature;
    bool has_pressure;
    float pressure;
    bool has_humidity;
    float humidity;
    bool has_count_in;
    uint32_t count_in;
    bool has_count_out;
    uint32_t count_out;
    bool has_batteryVoltage;
    uint32_t batteryVoltage;
    bool has_batteryLevel;
    uint32_t batteryLevel;
    bool has_mode;
    uint32_t mode;
/* @@protoc_insertion_point(struct:SensorMessage) */
} SensorMessage;

/* Default values for struct fields */

/* Initializer values for message structs */
#define SensorMessage_init_default               {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define SensorMessage_init_zero                  {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define SensorMessage_pir_status_tag             1
#define SensorMessage_mic_tag                    2
#define SensorMessage_light_tag                  3
#define SensorMessage_accelx_tag                 4
#define SensorMessage_accely_tag                 5
#define SensorMessage_accelz_tag                 6
#define SensorMessage_gyrx_tag                   7
#define SensorMessage_gyry_tag                   8
#define SensorMessage_gyrz_tag                   9
#define SensorMessage_magx_tag                   10
#define SensorMessage_magy_tag                   11
#define SensorMessage_magz_tag                   12
#define SensorMessage_temperature_tag            13
#define SensorMessage_pressure_tag               14
#define SensorMessage_humidity_tag               15
#define SensorMessage_count_in_tag               16
#define SensorMessage_count_out_tag              17
#define SensorMessage_batteryVoltage_tag         18
#define SensorMessage_batteryLevel_tag           19
#define SensorMessage_mode_tag                   20

/* Struct field encoding specification for nanopb */
extern const pb_field_t SensorMessage_fields[21];

/* Maximum encoded size of messages (where known) */
#define SensorMessage_size                       113

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define SENSORBUG_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
